"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ed25519 = __importStar(require("@noble/ed25519"));
// import nacl from 'tweetnacl';
const constants_1 = require("../../constants");
class InjectedAptosSigner {
    constructor(provider, publicKey) {
        this.ownerLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.INJECTEDAPTOS].pubLength;
        this.signatureLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.INJECTEDAPTOS].sigLength;
        this.signatureType = constants_1.SignatureConfig.INJECTEDAPTOS;
        this.provider = provider;
        this._publicKey = publicKey;
    }
    get publicKey() {
        return this._publicKey;
    }
    /**
     * signMessage constructs a message and then signs it.
     * the format is "APTOS(\n)
     * message: <hexString>(\n)
     * nonce: bundlr"
     */
    async sign(message) {
        if (!this.provider.signMessage)
            throw new Error("Selected Wallet does not support message signing");
        const signature = await this.provider.signMessage({
            message: Buffer.from(message).toString("hex"),
            nonce: "bundlr",
        });
        return Buffer.from(signature.signature, "hex");
    }
    static async verify(pk, message, signature) {
        let p = pk;
        return ed25519.verify(Buffer.from(signature), Buffer.from(`APTOS\nmessage: ${Buffer.from(message).toString("hex")}\nnonce: bundlr`), // see comment above sign
        Buffer.from(p));
    }
}
exports.default = InjectedAptosSigner;
//# sourceMappingURL=InjectedAptosSigner.js.map