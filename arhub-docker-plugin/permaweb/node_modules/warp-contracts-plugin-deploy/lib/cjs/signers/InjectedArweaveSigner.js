"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectedArweaveSigner = void 0;
const constants_1 = require("arbundles/src/constants");
const arweave_1 = __importDefault(require("arweave"));
const base64url_1 = __importDefault(require("base64url"));
const arbundles_1 = require("arbundles");
class InjectedArweaveSigner {
    constructor(windowArweaveWallet) {
        this.ownerLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.ARWEAVE].pubLength;
        this.signatureLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.ARWEAVE].sigLength;
        this.signatureType = constants_1.SignatureConfig.ARWEAVE;
        this.signer = windowArweaveWallet;
    }
    async setPublicKey() {
        let arOwner;
        if (this.signer.getPublicKey) {
            arOwner = await this.signer.getPublicKey();
        }
        else {
            arOwner = await this.signer.getActivePublicKey();
        }
        this.publicKey = base64url_1.default.toBuffer(arOwner);
    }
    async sign(message) {
        if (!this.publicKey) {
            await this.setPublicKey();
        }
        const algorithm = {
            name: 'RSA-PSS',
            saltLength: 0
        };
        const signature = await this.signer.signature(message, algorithm);
        const buf = new Uint8Array(Object.values(signature));
        return buf;
    }
    async signDataItem(data, tags) {
        if (!this.publicKey) {
            await this.setPublicKey();
        }
        return new arbundles_1.DataItem(Buffer.from(await this.signer.signDataItem({
            data,
            tags
        })));
    }
    static async verify(pk, message, signature) {
        return await arweave_1.default.crypto.verify(pk, message, signature);
    }
}
exports.InjectedArweaveSigner = InjectedArweaveSigner;
//# sourceMappingURL=InjectedArweaveSigner.js.map