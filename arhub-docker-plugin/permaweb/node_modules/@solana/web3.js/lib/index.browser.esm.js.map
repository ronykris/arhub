{"version":3,"file":"index.browser.esm.js","sources":["../src/utils/ed25519.ts","../src/utils/to-buffer.ts","../src/utils/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction/constants.ts","../src/transaction/expiry-custom-errors.ts","../src/message/account-keys.ts","../src/layout.ts","../src/utils/shortvec-encoding.ts","../src/utils/assert.ts","../src/message/compiled-keys.ts","../src/message/legacy.ts","../src/message/v0.ts","../src/message/versioned.ts","../src/transaction/legacy.ts","../src/transaction/message.ts","../src/transaction/versioned.ts","../src/timing.ts","../src/sysvar.ts","../src/utils/send-and-confirm-transaction.ts","../src/utils/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/utils/bigint.ts","../src/programs/system.ts","../src/loader.ts","../src/bpf-loader.ts","../../../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/rpc-websocket.ts","../src/account-data.ts","../src/programs/address-lookup-table/state.ts","../src/utils/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/programs/address-lookup-table/index.ts","../src/programs/compute-budget.ts","../src/programs/ed25519.ts","../src/utils/secp256k1.ts","../src/programs/secp256k1.ts","../src/programs/stake.ts","../src/programs/vote.ts","../src/validator-info.ts","../src/vote-account.ts","../src/utils/cluster.ts","../src/utils/send-and-confirm-raw-transaction.ts","../src/index.ts"],"sourcesContent":["import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["generatePrivateKey","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","_unused","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","properties","_classCallCheck","Object","assign","_createClass","key","value","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","_Struct","_inherits","_super","_createSuper","_this","call","keys","length","Error","map","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","_bn","undefined","uniquePublicKeyCounter","_Symbol$toStringTag","Symbol","toStringTag","PublicKey","decoded","bs58","BN","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","get","concat","toString","unique","_createWithSeed","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fromPublicKey","seed","programId","publicKeyBytes","wrap","_callee$","_context","prev","next","sha256","abrupt","stop","createWithSeed","_x","_x2","_x3","apply","arguments","createProgramAddressSync","seeds","forEach","TypeError","_createProgramAddress","_callee2","_callee2$","_context2","createProgramAddress","_x4","_x5","findProgramAddressSync","nonce","address","seedsWithNonce","err","_findProgramAddress","_callee3","_callee3$","_context3","findProgramAddress","_x6","_x7","pubkeyData","pubkey","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","_Error","signature","_wrapNativeSuper","defineProperty","prototype","TransactionExpiredTimeoutError","_Error2","_super2","timeoutSeconds","_this2","toFixed","TransactionExpiredNonceInvalidError","_Error3","_super3","_this3","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","index","_iterator","_createForOfIteratorHelper","_step","s","n","done","keySegment","e","f","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","condition","CompiledKeys","payer","keyMetaMap","getMessageComponents","mapEntries","_toConsumableArray","entries","assert","writableSigners","filter","_ref","_ref2","_slicedToArray","isSigner","isWritable","readonlySigners","_ref3","_ref4","writableNonSigners","_ref5","_ref6","readonlyNonSigners","_ref7","_ref8","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","_writableSigners$","payerAddress","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","extractTableLookup","lookupTable","_this$drainKeysFoundI","drainKeysFoundInLookupTable","state","addresses","keyMeta","isInvoked","_this$drainKeysFoundI2","writableIndexes","drainedWritableKeys","_this$drainKeysFoundI3","_this$drainKeysFoundI4","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","_loop","_step$value","lookupTableIndex","findIndex","entry","compile","getOrInsertDefault","payerKeyMeta","_iterator2","_step2","ix","_iterator3","_step3","accountMeta","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","getAccountKeys","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","compiledKeys","payerKey","_compiledKeys$getMess","_compiledKeys$getMess2","byteArray","accountCount","i","dataSlice","messageArgs","MessageV0","compiledInstructions","addressTableLookups","count","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","_iterator4","_step4","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","_iterator5","_step5","encodedAccountKeyIndexesLength","encodedDataLength","_iterator6","_step6","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","lookupTableAccounts","_iterator7","_step7","extractResult","_accountKeysFromLooku","_accountKeysFromLooku2","_extractResult","addressTableLookup","_extractResult$","maskedPrefix","version","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","minContextSlot","blockhash","nonceInstruction","signers","add","_len","items","_key","compileMessage","JSON","stringify","console","warn","accountMetas","_objectSpread","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","options","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","_uniqueMetas$splice","_uniqueMetas$splice2","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","valid","every","pair","serializeMessage","_getEstimatedFee","connection","getFeeForMessage","sent","getEstimatedFee","setSigners","_len2","_key2","seen","Set","_len3","_key3","uniqueSigners","_i","_signers","signer","_partialSign","partialSign","_len4","_key4","_i2","_signers2","_len5","_key5","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","_step2$value","config","_Object$assign","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","compileToLegacyMessage","compileToV0Message","decompile","compiledIx","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","messageData","signerPubkeys","signerIndex","signaturesLength","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","_sendAndConfirmTransaction","sendOptions","status","nonceAccountPubkey","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","_encodeDecode","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","_Object$entries","SYSTEM_INSTRUCTION_LAYOUTS","_Object$entries$_i","ixType","decodeCreateAccount","checkKeyLength","_decodeData","Create","lamports","space","fromPubkey","newAccountPubkey","decodeTransfer","_decodeData2","Transfer","toPubkey","decodeTransferWithSeed","_decodeData3","TransferWithSeed","basePubkey","decodeAllocate","_decodeData4","Allocate","accountPubkey","decodeAllocateWithSeed","_decodeData5","AllocateWithSeed","base","decodeAssign","_decodeData6","Assign","decodeAssignWithSeed","_decodeData7","AssignWithSeed","decodeCreateWithSeed","_decodeData8","CreateWithSeed","decodeNonceInitialize","_decodeData9","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","_decodeData10","WithdrawNonceAccount","decodeNonceAuthorize","_decodeData11","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","_load","program","balanceNeeded","programInfo","dataLayout","array","transactions","_data","_transaction","REQUESTS_PER_SECOND","_dataLayout","_data2","_transaction2","deployCommitment","finalizeSignature","_yield$connection$con","context","currentSlot","getMinimumBalanceForRentExemption","getAccountInfo","executable","error","owner","bytesLength","bytesLengthPadding","_rpcEndpoint","all","getSlot","slot","t0","round","load","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","MINIMUM_SLOT_PER_EPOCH","trailingZeros","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","customMessage","code","name","globalThis","fetch","RpcWebSocketClient","_RpcWebSocketCommonCl","generate_request_id","webSocketFactory","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","_this$underlyingSocke","readyState","_get2","_get","_getPrototypeOf","reject","notify","_this$underlyingSocke2","_get3","RpcWebSocketCommonClient","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","_BufferLayout$struct$","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","_matches","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","_objectWithoutProperties","_excluded","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","fetchImpl","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","too_many_requests_retries","res","waitTime","text","method","body","headers","COMMON_HTTP_HEADERS","log","statusText","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","_process$env$npm_pack","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_callee4","_requestPromises$requ","_extractCommitmentFro","requestHash","_callee4$","_context4","_buildArgs","fastStableStringify","unsafeRes","finish","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_getBalanceAndContext","_callee5","_extractCommitmentFro2","_callee5$","_context5","getBalanceAndContext","_getBalance","_callee6","_callee6$","_context6","then","getBalance","_x8","_x9","_getBlockTime","_callee7","_callee7$","_context7","getBlockTime","_x10","_getMinimumLedgerSlot","_callee8","_callee8$","_context8","getMinimumLedgerSlot","_getFirstAvailableBlock","_callee9","_callee9$","_context9","getFirstAvailableBlock","_getSupply","_callee10","configArg","_callee10$","_context10","getSupply","_x11","_getTokenSupply","_callee11","tokenMintAddress","_callee11$","_context11","getTokenSupply","_x12","_x13","_getTokenAccountBalance","_callee12","tokenAddress","_callee12$","_context12","getTokenAccountBalance","_x14","_x15","_getTokenAccountsByOwner","_callee13","ownerAddress","_extractCommitmentFro3","_args","_callee13$","_context13","getTokenAccountsByOwner","_x16","_x17","_x18","_getParsedTokenAccountsByOwner","_callee14","_callee14$","_context14","getParsedTokenAccountsByOwner","_x19","_x20","_x21","_getLargestAccounts","_callee15","arg","_callee15$","_context15","getLargestAccounts","_x22","_getTokenLargestAccounts","_callee16","mintAddress","_callee16$","_context16","getTokenLargestAccounts","_x23","_x24","_getAccountInfoAndContext","_callee17","_extractCommitmentFro4","_callee17$","_context17","getAccountInfoAndContext","_x25","_x26","_getParsedAccountInfo","_callee18","_extractCommitmentFro5","_callee18$","_context18","getParsedAccountInfo","_x27","_x28","_getAccountInfo","_callee19","_callee19$","_context19","_x29","_x30","_getMultipleParsedAccounts","_callee20","publicKeys","rawConfig","_extractCommitmentFro6","_callee20$","_context20","getMultipleParsedAccounts","_x31","_x32","_getMultipleAccountsInfoAndContext","_callee21","_extractCommitmentFro7","_callee21$","_context21","getMultipleAccountsInfoAndContext","_x33","_x34","_getMultipleAccountsInfo","_callee22","_callee22$","_context22","getMultipleAccountsInfo","_x35","_x36","_getStakeActivation","_callee23","_extractCommitmentFro8","_callee23$","_context23","getStakeActivation","_x37","_x38","_x39","_getProgramAccounts","_callee24","configOrCommitment","_extractCommitmentFro9","encoding","configWithoutEncoding","baseSchema","_callee24$","_context24","_excluded2","withContext","getProgramAccounts","_x40","_x41","_getParsedProgramAccounts","_callee25","_extractCommitmentFro10","_callee25$","_context25","getParsedProgramAccounts","_x42","_x43","_confirmTransaction","_callee26","strategy","rawSignature","_config$abortSignal","_config","decodedSignature","_callee26$","_context26","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","_x44","_x45","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","_callee27","_callee27$","_context27","getSignatureStatus","abortConfirmation","removeSignatureListener","_confirmTransactionUsingBlockHeightExceedanceStrategy","_callee30","_ref8$strategy","expiryPromise","_this$getTransactionC","cancellationPromise","outcome","_callee30$","_context30","checkBlockHeight","_callee28","_callee28$","_context28","_callee29","currentBlockHeight","_callee29$","_context29","BLOCKHEIGHT_EXCEEDED","race","_x46","_confirmTransactionUsingDurableNonceStrategy","_callee33","_this4","_ref11$strategy","_this$getTransactionC2","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_callee33$","_context34","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","_callee31","_yield$_this4$getNonc","_context31","_callee31$","_context32","getNonceAndContext","_callee32","_callee32$","_context33","NONCE_INVALID","slotInWhichNonceDidAdvance","_x47","_confirmTransactionUsingLegacyTimeoutStrategy","_callee34","_this5","timeoutId","_this$getTransactionC3","_callee34$","_context35","timeoutMs","TIMED_OUT","clearTimeout","_x48","_getClusterNodes","_callee35","_callee35$","_context36","getClusterNodes","_getVoteAccounts","_callee36","_callee36$","_context37","getVoteAccounts","_x49","_getSlot","_callee37","_extractCommitmentFro11","_callee37$","_context38","_x50","_getSlotLeader","_callee38","_extractCommitmentFro12","_callee38$","_context39","getSlotLeader","_x51","_getSlotLeaders","_callee39","startSlot","limit","_callee39$","_context40","getSlotLeaders","_x52","_x53","_getSignatureStatus","_callee40","_yield$this$getSignat","_callee40$","_context41","getSignatureStatuses","_x54","_x55","_getSignatureStatuses","_callee41","_callee41$","_context42","_x56","_x57","_getTransactionCount","_callee42","_extractCommitmentFro13","_callee42$","_context43","getTransactionCount","_x58","_getTotalSupply","_callee43","_callee43$","_context44","excludeNonCirculatingAccountsList","getTotalSupply","_x59","_getInflationGovernor","_callee44","_callee44$","_context45","getInflationGovernor","_x60","_getInflationReward","_callee45","_extractCommitmentFro14","_callee45$","_context46","getInflationReward","_x61","_x62","_x63","_getInflationRate","_callee46","_callee46$","_context47","getInflationRate","_getEpochInfo","_callee47","_extractCommitmentFro15","_callee47$","_context48","getEpochInfo","_x64","_getEpochSchedule","_callee48","epochSchedule","_callee48$","_context49","getEpochSchedule","_getLeaderSchedule","_callee49","_callee49$","_context50","getLeaderSchedule","_getMinimumBalanceForRentExemption","_callee50","_callee50$","_context51","_x65","_x66","_getRecentBlockhashAndContext","_callee51","_callee51$","_context52","getRecentBlockhashAndContext","_x67","_getRecentPerformanceSamples","_callee52","_callee52$","_context53","getRecentPerformanceSamples","_x68","_getFeeCalculatorForBlockhash","_callee53","_res$result","_callee53$","_context54","getFeeCalculatorForBlockhash","_x69","_x70","_getFeeForMessage","_callee54","wireMessage","_callee54$","_context55","_x71","_x72","_getRecentPrioritizationFees","_callee55","_config$lockedWritabl","_callee55$","_context56","lockedWritableAccounts","getRecentPrioritizationFees","_x73","_getRecentBlockhash","_callee56","_callee56$","_context57","getRecentBlockhash","_x74","_getLatestBlockhash","_callee57","_callee57$","_context58","getLatestBlockhashAndContext","getLatestBlockhash","_x75","_getLatestBlockhashAndContext","_callee58","_extractCommitmentFro16","_callee58$","_context59","_x76","_isBlockhashValid","_callee59","_extractCommitmentFro17","_callee59$","_context60","isBlockhashValid","_x77","_x78","_getVersion","_callee60","_callee60$","_context61","getVersion","_getGenesisHash","_callee61","_callee61$","_context62","getGenesisHash","_getBlock","_callee62","_extractCommitmentFro18","_res","_res2","_callee62$","_context63","_buildArgsAtLeastConfirmed","transactionDetails","t1","getBlock","_x79","_x80","_getParsedBlock","_callee63","_extractCommitmentFro19","_res3","_res4","_callee63$","_context64","getParsedBlock","_x81","_x82","_getBlockProduction","_callee64","extra","c","_callee64$","_context65","_excluded3","getBlockProduction","_x83","_getTransaction","_callee65","_extractCommitmentFro20","_callee65$","_context66","getTransaction","_x84","_x85","_getParsedTransaction","_callee66","_extractCommitmentFro21","_callee66$","_context67","getParsedTransaction","_x86","_x87","_getParsedTransactions","_callee67","_this6","_extractCommitmentFro22","_callee67$","_context68","getParsedTransactions","_x88","_x89","_getTransactions","_callee68","_this7","_extractCommitmentFro23","_callee68$","_context69","getTransactions","_x90","_x91","_getConfirmedBlock","_callee69","block","_callee69$","_context70","_ref17","getConfirmedBlock","_x92","_x93","_getBlocks","_callee70","endSlot","_callee70$","_context71","getBlocks","_x94","_x95","_x96","_getBlockSignatures","_callee71","_callee71$","_context72","getBlockSignatures","_x97","_x98","_getConfirmedBlockSignatures","_callee72","_callee72$","_context73","getConfirmedBlockSignatures","_x99","_x100","_getConfirmedTransaction","_callee73","_callee73$","_context74","getConfirmedTransaction","_x101","_x102","_getParsedConfirmedTransaction","_callee74","_callee74$","_context75","getParsedConfirmedTransaction","_x103","_x104","_getParsedConfirmedTransactions","_callee75","_this8","_callee75$","_context76","getParsedConfirmedTransactions","_x105","_x106","_getConfirmedSignaturesForAddress","_callee76","firstAvailableBlock","highestConfirmedRoot","_block","confirmedSignatureInfo","_callee76$","_context77","until","before","getConfirmedSignaturesForAddress2","getConfirmedSignaturesForAddress","_x107","_x108","_x109","_getConfirmedSignaturesForAddress2","_callee77","_callee77$","_context78","_x110","_x111","_x112","_getSignaturesForAddress","_callee78","_callee78$","_context79","getSignaturesForAddress","_x113","_x114","_x115","_getAddressLookupTable","_callee79","_yield$this$getAccoun","accountInfo","_callee79$","_context80","getAddressLookupTable","_x116","_x117","_getNonceAndContext","_callee80","_yield$this$getAccoun2","_callee80$","_context81","_x118","_x119","_getNonce","_callee81","_callee81$","_context82","getNonce","_x120","_x121","_requestAirdrop","_callee82","to","_callee82$","_context83","requestAirdrop","_x122","_x123","_blockhashWithExpiryBlockHeight2","_callee83","disableCache","timeSinceFetch","expired","_callee83$","_context84","Date","now","_pollNewBlockhash","_blockhashWithExpiryBlockHeight","_x124","_pollNewBlockhash2","_callee84","startTime","cachedLatestBlockhash","cachedBlockhash","_callee84$","_context85","_getStakeMinimumDelegation","_callee85","_extractCommitmentFro24","_callee85$","_context86","getStakeMinimumDelegation","_x125","_simulateTransaction","_callee86","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","_wireTransaction","_encodedTransaction","_config2","_args87","_unsafeRes","_res5","originalTx","_signature","encodedTransaction","_logs","traceIndent","logTrace","_callee86$","_context87","sigVerify","join","simulateTransaction","_x126","_x127","_x128","_sendTransaction","_callee87","signersOrOptions","_wireTransaction2","_signature2","_callee87$","_context88","sendRawTransaction","_x129","_x130","_x131","_sendRawTransaction","_callee88","rawTransaction","_callee88$","_context89","sendEncodedTransaction","_x132","_x133","_sendEncodedTransaction","_callee89","_logs2","_callee89$","_context90","_x134","_x135","_this9","setInterval","_callee90","_callee90$","_context91","_updateSubscriptions","_this10","Number","MAX_SAFE_INTEGER","clearInterval","_ref19","_ref20","hash","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","_unused2","clientSubscriptionId","_this$_subscriptionSt","_this11","_updateSubscriptions2","_callee94","_this12","activeWebSocketGeneration","isCurrentConnectionStillActive","_callee94$","_context95","close","connect","_ref21","_callee93","_callee93$","_context94","callbacks","serverSubscriptionId","_callee91","_serverSubscriptionId","_callee91$","_context92","_callee92","unsubscribeMethod","_callee92$","_context93","_x136","_handleServerNotification","callbackArgs","notification","_create","_makeSubscription","subscriptionConfig","_this13","existingSubscription","_callee95","_callee95$","_context96","onAccountChange","_removeAccountChangeListener","_callee96","_callee96$","_context97","_unsubscribeClientSubscription","removeAccountChangeListener","_x137","_create2","accountId","onProgramAccountChange","filters","_removeProgramAccountChangeListener","_callee97","_callee97$","_context98","removeProgramAccountChangeListener","_x138","onLogs","_typeof","mentions","_removeOnLogsListener","_callee98","_callee98$","_context99","removeOnLogsListener","_x139","_create3","_create4","onSlotChange","_removeSlotChangeListener","_callee99","_callee99$","_context100","removeSlotChangeListener","_x140","_create5","onSlotUpdate","_removeSlotUpdateListener","_callee100","_callee100$","_context101","removeSlotUpdateListener","_x141","_unsubscribeClientSubscription2","_callee101","subscriptionName","dispose","_callee101$","_context102","_x142","_x143","override","_create6","_this14","_err","onSignatureWithOptions","_this15","_options$commitment","_excluded4","_removeSignatureListener","_callee102","_callee102$","_context103","_x144","_create7","onRootChange","_removeRootChangeListener","_callee103","_callee103$","_context104","removeRootChangeListener","_x145","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","_PublicKey$findProgra","_PublicKey$findProgra2","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","RequestUnits","units","additionalFee","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","SetComputeUnitPrice","microLamports","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","ecdsaSign","msgHash","privKey","secp256k1","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","_params$instructionIn","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","_ecdsaSign","_ecdsaSign2","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","Authorize","newAuthorized","stakeAuthorizationType","o","custodianPubkey","decodeAuthorizeWithSeed","AuthorizeWithSeed","authoritySeed","authorityOwner","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","_decodeData3$voteAuth","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","_sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"mappings":"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","x_google_ignoreList":[30]}