"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepHashChunks = exports.deepHash = void 0;
// import { createHash } from 'crypto';
const utils_1 = require("./nodeUtils.js");
function deepHash(data) {
    return __awaiter(this, void 0, void 0, function* () {
        // if (typeof data[Symbol.asyncIterator as keyof AsyncIterable<Buffer>] === 'function') {
        //   const _data = data as AsyncIterable<Buffer>;
        //   const context = createHash('sha384');
        //   let length = 0;
        //   for await (const chunk of _data) {
        //     length += chunk.byteLength;
        //     context.update(chunk);
        //   }
        //   const tag = concatBuffers([stringToBuffer('blob'), stringToBuffer(length.toString())]);
        //   const taggedHash = concatBuffers([await getCryptoDriver().hash(tag, 'SHA-384'), context.digest()]);
        //   return await getCryptoDriver().hash(taggedHash, 'SHA-384');
        // } else if (Array.isArray(data)) {
        if (Array.isArray(data)) {
            const tag = (0, utils_1.concatBuffers)([(0, utils_1.stringToBuffer)('list'), (0, utils_1.stringToBuffer)(data.length.toString())]);
            return yield deepHashChunks(data, yield (0, utils_1.getCryptoDriver)().hash(tag, 'SHA-384'));
        }
        // }
        const _data = data;
        const tag = (0, utils_1.concatBuffers)([(0, utils_1.stringToBuffer)('blob'), (0, utils_1.stringToBuffer)(_data.byteLength.toString())]);
        const taggedHash = (0, utils_1.concatBuffers)([
            yield (0, utils_1.getCryptoDriver)().hash(tag, 'SHA-384'),
            yield (0, utils_1.getCryptoDriver)().hash(_data, 'SHA-384'),
        ]);
        return yield (0, utils_1.getCryptoDriver)().hash(taggedHash, 'SHA-384');
    });
}
exports.deepHash = deepHash;
function deepHashChunks(chunks, acc) {
    return __awaiter(this, void 0, void 0, function* () {
        if (chunks.length < 1) {
            return acc;
        }
        const hashPair = (0, utils_1.concatBuffers)([acc, yield deepHash(chunks[0])]);
        const newAcc = yield (0, utils_1.getCryptoDriver)().hash(hashPair, 'SHA-384');
        return yield deepHashChunks(chunks.slice(1), newAcc);
    });
}
exports.deepHashChunks = deepHashChunks;
//# sourceMappingURL=deepHash.js.map