/// <reference types="node" />
import * as arbundlesSrc from './src/index.js';
declare const expObj: {
    Signer: typeof arbundlesSrc.Signer;
    indexToType: arbundlesSrc.IndexToType;
    ArweaveSigner: typeof arbundlesSrc.ArweaveSigner;
    createData(data: string | Uint8Array, signer: arbundlesSrc.Signer, opts?: arbundlesSrc.DataItemCreateOptions): arbundlesSrc.DataItem;
    MAX_TAG_BYTES: 4096;
    MIN_BINARY_SIZE: 80;
    DataItem: typeof arbundlesSrc.DataItem;
    serializeTags(tags: arbundlesSrc.Tag[]): Buffer;
    tagsExceedLimit(tags: arbundlesSrc.Tag[]): boolean;
    deserializeTags(tagsBuffer: Buffer): arbundlesSrc.Tag[];
    AVSCTap: typeof arbundlesSrc.AVSCTap;
    SignatureConfig: typeof arbundlesSrc.SignatureConfig;
    SIG_CONFIG: Record<arbundlesSrc.SignatureConfig, arbundlesSrc.SignatureMeta>;
};
export * from './src/index.js';
export default expObj;
export declare const warparbundles: {
    Signer: typeof arbundlesSrc.Signer;
    indexToType: arbundlesSrc.IndexToType;
    ArweaveSigner: typeof arbundlesSrc.ArweaveSigner;
    createData(data: string | Uint8Array, signer: arbundlesSrc.Signer, opts?: arbundlesSrc.DataItemCreateOptions): arbundlesSrc.DataItem;
    MAX_TAG_BYTES: 4096;
    MIN_BINARY_SIZE: 80;
    DataItem: typeof arbundlesSrc.DataItem;
    serializeTags(tags: arbundlesSrc.Tag[]): Buffer;
    tagsExceedLimit(tags: arbundlesSrc.Tag[]): boolean;
    deserializeTags(tagsBuffer: Buffer): arbundlesSrc.Tag[];
    AVSCTap: typeof arbundlesSrc.AVSCTap;
    SignatureConfig: typeof arbundlesSrc.SignatureConfig;
    SIG_CONFIG: Record<arbundlesSrc.SignatureConfig, arbundlesSrc.SignatureMeta>;
};
