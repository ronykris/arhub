import Arweave from 'arweave';
import { generateMnemonic, getKeyFromMnemonic } from 'arweave-mnemonic-keys';
const initArweave = (params) => {
    let arweave;
    if (params.environment === 'local') {
        arweave = Arweave.init({
            host: 'localhost',
            port: 1984,
            protocol: 'http',
        });
    }
    else {
        arweave = Arweave.init({
            host: 'arweave.net',
            port: 443,
            protocol: 'https',
        });
    }
    return arweave;
};
/**
 * create wallet
 * @params CreateWalletProps
 * @returns CreateWalletReturnProps
 */
export async function createWallet(params) {
    const arweave = initArweave({ environment: params.environment });
    if (params?.seedPhrase) {
        const seedPhrase = await generateMnemonic();
        if (seedPhrase) {
            const key = await getKeyFromMnemonic(seedPhrase);
            const walletAddress = await arweave.wallets.jwkToAddress(key);
            if (params.environment === 'local') {
                await arweave.api
                    .get(`mint/${walletAddress}/1000000000000`)
                    .catch((error) => console.error(error));
            }
            return {
                key,
                walletAddress,
                seedPhrase,
            };
        }
    }
    const key = await arweave.wallets.generate();
    const walletAddress = await arweave.wallets.jwkToAddress(key);
    if (params.environment === 'local') {
        await arweave.api
            .get(`mint/${walletAddress}/1000000000000`)
            .catch((error) => console.error(error));
    }
    return {
        key,
        walletAddress,
    };
}
/**
 * get wallet address for a private key
 * @params GetAddress Props
 * @return wallet address
 */
export async function getAddress(params) {
    const arweave = initArweave({ environment: params.environment });
    const address = await arweave.wallets.jwkToAddress(params.key);
    return address;
}
/**
 * get balance of wallet address
 * @params GetBalanceProps
 * @returns balance of given address in AR or Winston
 */
export async function getBalance(params) {
    let walletBalance;
    const arweave = initArweave({ environment: params.environment });
    const winstonBalance = await arweave.wallets.getBalance(params.address);
    if (params.options?.winstonToAr) {
        walletBalance = arweave.ar.winstonToAr(winstonBalance);
        return walletBalance;
    }
    else {
        walletBalance = winstonBalance;
        return walletBalance;
    }
}
//# sourceMappingURL=wallet.js.map