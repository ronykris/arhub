"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectedArweaveSigner = void 0;
const arweave_1 = __importDefault(require("arweave"));
const base64url_1 = __importDefault(require("base64url"));
const constants_1 = require("../../constants");
const DataItem_1 = require("../../DataItem");
class InjectedArweaveSigner {
    constructor(windowArweaveWallet) {
        this.ownerLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.ARWEAVE].pubLength;
        this.signatureLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.ARWEAVE].sigLength;
        this.signatureType = constants_1.SignatureConfig.ARWEAVE;
        this.signer = windowArweaveWallet;
    }
    setPublicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            let arOwner;
            if (this.signer.getPublicKey) {
                arOwner = yield this.signer.getPublicKey();
            }
            else {
                arOwner = yield this.signer.getActivePublicKey();
            }
            this.publicKey = base64url_1.default.toBuffer(arOwner);
        });
    }
    sign(message) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.publicKey) {
                yield this.setPublicKey();
            }
            const algorithm = {
                name: 'RSA-PSS',
                saltLength: 0,
            };
            const signature = yield this.signer.signature(message, algorithm);
            const buf = new Uint8Array(Object.values(signature));
            return buf;
        });
    }
    signDataItem(data, tags) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.publicKey) {
                yield this.setPublicKey();
            }
            return new DataItem_1.DataItem(Buffer.from(yield this.signer.signDataItem({
                data,
                tags,
            })));
        });
    }
    static verify(pk, message, signature) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield arweave_1.default.crypto.verify(pk, message, signature);
        });
    }
}
exports.InjectedArweaveSigner = InjectedArweaveSigner;
//# sourceMappingURL=InjectedArweaveSigner.js.map