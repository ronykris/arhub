import Axios from "axios";
import Bundlr from "./bundlr.js";
// TODO: overhaul this
export default class Api {
    METHOD_GET = "GET";
    METHOD_POST = "POST";
    instance;
    cookieMap = new Map();
    config;
    constructor(config) {
        this.applyConfig(config);
    }
    applyConfig(config) {
        this.config = this.mergeDefaults(config);
    }
    getConfig() {
        return this.config;
    }
    async requestInterceptor(request) {
        const cookies = this.cookieMap.get(new URL(request.baseURL ?? "").host);
        if (cookies)
            request.headers.cookie = cookies;
        return request;
    }
    async responseInterceptor(response) {
        const setCookie = response.headers?.["set-cookie"];
        if (setCookie)
            this.cookieMap.set(response.request.host, setCookie);
        return response;
    }
    mergeDefaults(config) {
        const protocol = config.protocol ?? "http";
        const port = config.port ?? (protocol === "https" ? 443 : 80);
        return {
            host: config.host ?? "127.0.0.1",
            protocol,
            port,
            timeout: config.timeout ?? 20000,
            logging: config.logging ?? false,
            logger: config.logger ?? console.log,
            headers: { ...config.headers, "x-bundlr-js-sdk-version": Bundlr.VERSION },
            withCredentials: true,
        };
    }
    async get(endpoint, config) {
        try {
            return await this.request().get(endpoint, { ...config, headers: { ...config?.headers, ...this.config?.headers } });
        }
        catch (error) {
            if (error.response?.status) {
                return error.response;
            }
            throw error;
        }
    }
    async post(endpoint, body, config) {
        try {
            return await this.request().post(endpoint, body, { ...config, headers: { ...config?.headers, ...this.config?.headers } });
        }
        catch (error) {
            if (error.response?.status) {
                return error.response;
            }
            throw error;
        }
    }
    request() {
        if (this.instance)
            return this.instance;
        const instance = Axios.create({
            baseURL: `${this.config.protocol}://${this.config.host}:${this.config.port}`,
            timeout: this.config.timeout,
            maxContentLength: 1024 * 1024 * 512,
            headers: this.config.headers,
            withCredentials: this.config.withCredentials,
        });
        if (this.config.withCredentials) {
            instance.interceptors.request.use(this.requestInterceptor.bind(this));
            instance.interceptors.response.use(this.responseInterceptor.bind(this));
        }
        if (this.config.logging) {
            instance.interceptors.request.use((request) => {
                this.config.logger(`Requesting: ${request.baseURL}/${request.url}`);
                return request;
            });
            instance.interceptors.response.use((response) => {
                this.config.logger(`Response:   ${response.config.url} - ${response.status}`);
                return response;
            });
        }
        return (this.instance = instance);
    }
}
//# sourceMappingURL=api.js.map