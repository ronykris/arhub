import Crypto from "crypto";
/**
 * Extended DataItem that allows for seamless bundlr operations, such as signing and uploading.
 * Takes the same parameters as a regular DataItem.
 */
export default function buildBundlrTransaction(bundlr) {
    class BundlrTransaction extends bundlr.arbundles.DataItem {
        bundlr;
        signer;
        constructor(data, bundlr, opts) {
            super(opts?.dataIsRawTransaction === true
                ? Buffer.from(data)
                : bundlr.arbundles
                    .createData(data, bundlr.currencyConfig.getSigner(), {
                    ...opts,
                    anchor: opts?.anchor ?? Crypto.randomBytes(32).toString("base64").slice(0, 32),
                })
                    .getRaw());
            this.bundlr = bundlr;
            this.signer = bundlr.currencyConfig.getSigner();
        }
        sign() {
            return super.sign(this.signer);
        }
        get size() {
            return this.getRaw().length;
        }
        async uploadWithReceipt(opts) {
            return (await this.bundlr.uploader.uploadTransaction(this, { ...opts, getReceiptSignature: true })).data;
        }
        async upload(opts) {
            return (await this.bundlr.uploader.uploadTransaction(this, opts)).data;
        }
    }
    return BundlrTransaction;
}
// export abstract class BundlrTransaction extends DataItem {}
// export interface BundlrTransaction extends DataItem {
//   size: number;
//   uploadWithReceipt(opts?: UploadOptions): Promise<UploadReceipt>;
//   upload(opts: UploadOptions & { getReceiptSignature: true }): Promise<UploadReceipt>;
//   upload(opts?: UploadOptions): Promise<UploadResponse>;
// }
//# sourceMappingURL=transaction.js.map