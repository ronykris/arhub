"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = __importDefault(require("../common/api"));
const bundlr_1 = __importDefault(require("../common/bundlr"));
const fund_1 = __importDefault(require("../common/fund"));
const upload_1 = __importDefault(require("../common/upload"));
const utils_1 = __importDefault(require("../common/utils"));
const index_1 = __importDefault(require("./currencies/index"));
const arbundles = __importStar(require("./utils"));
class WebBundlr extends bundlr_1.default {
    constructor(url, currency, provider, config) {
        var _a, _b;
        const parsed = new URL(url);
        // @ts-expect-error private type issue
        super(parsed, arbundles);
        this.api = new api_1.default({
            protocol: parsed.protocol.slice(0, -1),
            port: parsed.port,
            host: parsed.hostname,
            timeout: (_a = config === null || config === void 0 ? void 0 : config.timeout) !== null && _a !== void 0 ? _a : 100000,
            headers: config === null || config === void 0 ? void 0 : config.headers,
        });
        this.currencyConfig = (0, index_1.default)(this, currency.toLowerCase(), provider, config === null || config === void 0 ? void 0 : config.providerUrl, config === null || config === void 0 ? void 0 : config.contractAddress);
        this.api = new api_1.default({ protocol: parsed.protocol.slice(0, -1), port: parsed.port, host: parsed.hostname, timeout: (_b = config === null || config === void 0 ? void 0 : config.timeout) !== null && _b !== void 0 ? _b : 100000 });
        this.currency = this.currencyConfig.name;
        if (parsed.host === "devnet.bundlr.network" && !((config === null || config === void 0 ? void 0 : config.providerUrl) || this.currencyConfig.inheritsRPC))
            throw new Error(`Using ${parsed.host} requires a dev/testnet RPC to be configured! see https://docs.bundlr.network/sdk/using-devnet`);
        this.utils = new utils_1.default(this.api, this.currency, this.currencyConfig);
        this.uploader = new upload_1.default(this.api, this.utils, this.currency, this.currencyConfig);
        this.funder = new fund_1.default(this.utils);
        this.address = "Please run `await bundlr.ready()`";
    }
}
exports.default = WebBundlr;
//# sourceMappingURL=bundlr.js.map