"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApolloServer = void 0;
const cors_1 = __importDefault(require("@koa/cors"));
const koa_bodyparser_1 = __importDefault(require("koa-bodyparser"));
const koa_compose_1 = __importDefault(require("koa-compose"));
const apollo_server_core_1 = require("apollo-server-core");
const accepts_1 = __importDefault(require("accepts"));
var apollo_server_core_2 = require("apollo-server-core");
const middlewareFromPath = (path, middleware) => (ctx, next) => {
    if (ctx.path === path || ctx.path === `${path}/`) {
        return middleware(ctx, next);
    }
    else {
        return next();
    }
};
class ApolloServer extends apollo_server_core_1.ApolloServerBase {
    async createGraphQLServerOptions(ctx) {
        return super.graphQLServerOptions({ ctx });
    }
    applyMiddleware({ app, ...rest }) {
        this.assertStarted('applyMiddleware');
        app.use(this.getMiddleware(rest));
    }
    getMiddleware({ path, cors, bodyParserConfig, disableHealthCheck, onHealthCheck, } = {}) {
        if (!path)
            path = '/graphql';
        this.assertStarted('getMiddleware');
        const middlewares = [];
        if (!disableHealthCheck) {
            middlewares.push(middlewareFromPath('/.well-known/apollo/server-health', async (ctx) => {
                ctx.set('Content-Type', 'application/health+json');
                if (onHealthCheck) {
                    try {
                        await onHealthCheck(ctx);
                        ctx.body = { status: 'pass' };
                    }
                    catch (e) {
                        ctx.status = 503;
                        ctx.body = { status: 'fail' };
                    }
                }
                else {
                    ctx.body = { status: 'pass' };
                }
            }));
        }
        this.graphqlPath = path;
        if (cors === true || cors === undefined) {
            middlewares.push(middlewareFromPath(path, (0, cors_1.default)({ origin: '*' })));
        }
        else if (cors !== false) {
            middlewares.push(middlewareFromPath(path, (0, cors_1.default)(cors)));
        }
        if (bodyParserConfig === true) {
            middlewares.push(middlewareFromPath(path, (0, koa_bodyparser_1.default)()));
        }
        else if (bodyParserConfig !== false) {
            middlewares.push(middlewareFromPath(path, (0, koa_bodyparser_1.default)(bodyParserConfig)));
        }
        const landingPage = this.getLandingPage();
        middlewares.push(middlewareFromPath(path, async (ctx) => {
            if (ctx.request.method === 'OPTIONS') {
                ctx.status = 204;
                ctx.body = '';
                return;
            }
            if (landingPage && ctx.request.method === 'GET') {
                const accept = (0, accepts_1.default)(ctx.req);
                const types = accept.types();
                const prefersHtml = types.find((x) => x === 'text/html' || x === 'application/json') === 'text/html';
                if (prefersHtml) {
                    ctx.set('Content-Type', 'text/html');
                    ctx.body = landingPage.html;
                    return;
                }
            }
            try {
                const { graphqlResponse, responseInit } = await (0, apollo_server_core_1.runHttpQuery)([ctx], {
                    method: ctx.request.method,
                    options: () => this.createGraphQLServerOptions(ctx),
                    query: ctx.request.method === 'POST'
                        ?
                            ctx.request.body || ctx.req.body
                        : ctx.request.query,
                    request: (0, apollo_server_core_1.convertNodeHttpToRequest)(ctx.req),
                }, this.csrfPreventionRequestHeaders);
                if (responseInit.headers) {
                    Object.entries(responseInit.headers).forEach(([headerName, value]) => ctx.set(headerName, value));
                }
                ctx.body = graphqlResponse;
                ctx.status = responseInit.status || 200;
            }
            catch (error) {
                if (!(0, apollo_server_core_1.isHttpQueryError)(error)) {
                    throw error;
                }
                if (error.headers) {
                    Object.entries(error.headers).forEach(([headerName, value]) => ctx.set(headerName, value));
                }
                ctx.status = error.statusCode;
                ctx.body = error.message;
            }
        }));
        return (0, koa_compose_1.default)(middlewares);
    }
}
exports.ApolloServer = ApolloServer;
//# sourceMappingURL=ApolloServer.js.map