{"version":3,"file":"MetaMaskInpageProvider.js","sourceRoot":"","sources":["../src/MetaMaskInpageProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { ethErrors } from 'eth-rpc-errors';\nimport type { JsonRpcRequest, JsonRpcResponse } from 'json-rpc-engine';\nimport type { Duplex } from 'stream';\n\nimport type { UnvalidatedJsonRpcRequest } from './BaseProvider';\nimport messages from './messages';\nimport { sendSiteMetadata } from './siteMetadata';\nimport {\n  AbstractStreamProvider,\n  StreamProviderOptions,\n} from './StreamProvider';\nimport {\n  EMITTED_NOTIFICATIONS,\n  getDefaultExternalMiddleware,\n  getRpcPromiseCallback,\n  NOOP,\n} from './utils';\n\nexport type SendSyncJsonRpcRequest = {\n  method:\n    | 'eth_accounts'\n    | 'eth_coinbase'\n    | 'eth_uninstallFilter'\n    | 'net_version';\n} & JsonRpcRequest<unknown>;\n\ntype WarningEventName = keyof SentWarningsState['events'];\n\nexport type MetaMaskInpageProviderOptions = {\n  /**\n   * Whether the provider should send page metadata.\n   */\n  shouldSendMetadata?: boolean;\n\n  jsonRpcStreamName?: string | undefined;\n} & Partial<Omit<StreamProviderOptions, 'rpcMiddleware'>>;\n\ntype SentWarningsState = {\n  // methods\n  enable: boolean;\n  experimentalMethods: boolean;\n  send: boolean;\n  // events\n  events: {\n    close: boolean;\n    data: boolean;\n    networkChanged: boolean;\n    notification: boolean;\n  };\n};\n\n/**\n * The name of the stream consumed by {@link MetaMaskInpageProvider}.\n */\nexport const MetaMaskInpageProviderStreamName = 'metamask-provider';\n\nexport class MetaMaskInpageProvider extends AbstractStreamProvider {\n  protected _sentWarnings: SentWarningsState = {\n    // methods\n    enable: false,\n    experimentalMethods: false,\n    send: false,\n    // events\n    events: {\n      close: false,\n      data: false,\n      networkChanged: false,\n      notification: false,\n    },\n  };\n\n  /**\n   * Experimental methods can be found here.\n   */\n  public readonly _metamask: ReturnType<\n    MetaMaskInpageProvider['_getExperimentalApi']\n  >;\n\n  public networkVersion: string | null;\n\n  /**\n   * Indicating that this provider is a MetaMask provider.\n   */\n  public readonly isMetaMask: true;\n\n  /**\n   * Creates a new `MetaMaskInpageProvider`.\n   *\n   * @param connectionStream - A Node.js duplex stream.\n   * @param options - An options bag.\n   * @param options.jsonRpcStreamName - The name of the internal JSON-RPC stream.\n   * Default: `metamask-provider`.\n   * @param options.logger - The logging API to use. Default: `console`.\n   * @param options.maxEventListeners - The maximum number of event\n   * listeners. Default: 100.\n   * @param options.shouldSendMetadata - Whether the provider should\n   * send page metadata. Default: `true`.\n   */\n  constructor(\n    connectionStream: Duplex,\n    {\n      jsonRpcStreamName = MetaMaskInpageProviderStreamName,\n      logger = console,\n      maxEventListeners = 100,\n      shouldSendMetadata,\n    }: MetaMaskInpageProviderOptions = {},\n  ) {\n    super(connectionStream, {\n      jsonRpcStreamName,\n      logger,\n      maxEventListeners,\n      rpcMiddleware: getDefaultExternalMiddleware(logger),\n    });\n\n    // We shouldn't perform asynchronous work in the constructor, but at one\n    // point we started doing so, and changing this class isn't worth it at\n    // the time of writing.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._initializeStateAsync();\n\n    this.networkVersion = null;\n    this.isMetaMask = true;\n\n    this._sendSync = this._sendSync.bind(this);\n    this.enable = this.enable.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    this._warnOfDeprecation = this._warnOfDeprecation.bind(this);\n\n    this._metamask = this._getExperimentalApi();\n\n    // handle JSON-RPC notifications\n    this._jsonRpcConnection.events.on('notification', (payload) => {\n      const { method } = payload;\n      if (EMITTED_NOTIFICATIONS.includes(method)) {\n        // deprecated\n        // emitted here because that was the original order\n        this.emit('data', payload);\n        // deprecated\n        this.emit('notification', payload.params.result);\n      }\n    });\n\n    // send website metadata\n    if (shouldSendMetadata) {\n      if (document.readyState === 'complete') {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        sendSiteMetadata(this._rpcEngine, this._log);\n      } else {\n        const domContentLoadedHandler = () => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          sendSiteMetadata(this._rpcEngine, this._log);\n          window.removeEventListener(\n            'DOMContentLoaded',\n            domContentLoadedHandler,\n          );\n        };\n        window.addEventListener('DOMContentLoaded', domContentLoadedHandler);\n      }\n    }\n  }\n\n  //====================\n  // Public Methods\n  //====================\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   *\n   * @param payload - The RPC request object.\n   * @param callback - The callback function.\n   */\n  sendAsync(\n    payload: JsonRpcRequest<unknown>,\n    callback: (error: Error | null, result?: JsonRpcResponse<unknown>) => void,\n  ): void {\n    this._rpcRequest(payload, callback);\n  }\n\n  /**\n   * We override the following event methods so that we can warn consumers\n   * about deprecated events:\n   * `addListener`, `on`, `once`, `prependListener`, `prependOnceListener`.\n   */\n\n  addListener(eventName: string, listener: (...args: unknown[]) => void) {\n    this._warnOfDeprecation(eventName);\n    return super.addListener(eventName, listener);\n  }\n\n  on(eventName: string, listener: (...args: unknown[]) => void) {\n    this._warnOfDeprecation(eventName);\n    return super.on(eventName, listener);\n  }\n\n  once(eventName: string, listener: (...args: unknown[]) => void) {\n    this._warnOfDeprecation(eventName);\n    return super.once(eventName, listener);\n  }\n\n  prependListener(eventName: string, listener: (...args: unknown[]) => void) {\n    this._warnOfDeprecation(eventName);\n    return super.prependListener(eventName, listener);\n  }\n\n  prependOnceListener(\n    eventName: string,\n    listener: (...args: unknown[]) => void,\n  ) {\n    this._warnOfDeprecation(eventName);\n    return super.prependOnceListener(eventName, listener);\n  }\n\n  //====================\n  // Private Methods\n  //====================\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes.\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * @fires BaseProvider#disconnect - If the disconnection is not recoverable.\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string) {\n    super._handleDisconnect(isRecoverable, errorMessage);\n    if (this.networkVersion && !isRecoverable) {\n      this.networkVersion = null;\n    }\n  }\n\n  /**\n   * Warns of deprecation for the given event, if applicable.\n   *\n   * @param eventName - The name of the event.\n   */\n  protected _warnOfDeprecation(eventName: string): void {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-boolean-literal-compare\n    if (this._sentWarnings?.events[eventName as WarningEventName] === false) {\n      this._log.warn(messages.warnings.events[eventName as WarningEventName]);\n      this._sentWarnings.events[eventName as WarningEventName] = true;\n    }\n  }\n\n  //====================\n  // Deprecated Methods\n  //====================\n\n  /**\n   * Equivalent to: `ethereum.request('eth_requestAccounts')`.\n   *\n   * @deprecated Use request({ method: 'eth_requestAccounts' }) instead.\n   * @returns A promise that resolves to an array of addresses.\n   */\n  async enable(): Promise<string[]> {\n    if (!this._sentWarnings.enable) {\n      this._log.warn(messages.warnings.enableDeprecation);\n      this._sentWarnings.enable = true;\n    }\n\n    return new Promise<string[]>((resolve, reject) => {\n      try {\n        this._rpcRequest(\n          { method: 'eth_requestAccounts', params: [] },\n          getRpcPromiseCallback(resolve, reject),\n        );\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   *\n   * @deprecated Use \"request\" instead.\n   * @param method - The method to request.\n   * @param params - Any params for the method.\n   * @returns A Promise that resolves with the JSON-RPC response object for the\n   * request.\n   */\n  send<T>(method: string, params?: T[]): Promise<JsonRpcResponse<T>>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   *\n   * @deprecated Use \"request\" instead.\n   * @param payload - A JSON-RPC request object.\n   * @param callback - An error-first callback that will receive the JSON-RPC\n   * response object.\n   */\n  send<T>(\n    payload: JsonRpcRequest<unknown>,\n    callback: (error: Error | null, result?: JsonRpcResponse<T>) => void,\n  ): void;\n\n  /**\n   * Accepts a JSON-RPC request object, and synchronously returns the cached result\n   * for the given method. Only supports 4 specific RPC methods.\n   *\n   * @deprecated Use \"request\" instead.\n   * @param payload - A JSON-RPC request object.\n   * @returns A JSON-RPC response object.\n   */\n  send<T>(payload: SendSyncJsonRpcRequest): JsonRpcResponse<T>;\n\n  // eslint-disable-next-line @typescript-eslint/promise-function-async\n  send(methodOrPayload: unknown, callbackOrArgs?: unknown): unknown {\n    if (!this._sentWarnings.send) {\n      this._log.warn(messages.warnings.sendDeprecation);\n      this._sentWarnings.send = true;\n    }\n\n    if (\n      typeof methodOrPayload === 'string' &&\n      (!callbackOrArgs || Array.isArray(callbackOrArgs))\n    ) {\n      return new Promise((resolve, reject) => {\n        try {\n          this._rpcRequest(\n            { method: methodOrPayload, params: callbackOrArgs },\n            getRpcPromiseCallback(resolve, reject, false),\n          );\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } else if (\n      methodOrPayload &&\n      typeof methodOrPayload === 'object' &&\n      typeof callbackOrArgs === 'function'\n    ) {\n      return this._rpcRequest(\n        methodOrPayload as JsonRpcRequest<unknown>,\n        callbackOrArgs as (...args: unknown[]) => void,\n      );\n    }\n    return this._sendSync(methodOrPayload as SendSyncJsonRpcRequest);\n  }\n\n  /**\n   * Internal backwards compatibility method, used in send.\n   *\n   * @param payload - A JSON-RPC request object.\n   * @returns A JSON-RPC response object.\n   * @deprecated\n   */\n  protected _sendSync(payload: SendSyncJsonRpcRequest) {\n    let result;\n    switch (payload.method) {\n      case 'eth_accounts':\n        result = this.selectedAddress ? [this.selectedAddress] : [];\n        break;\n\n      case 'eth_coinbase':\n        result = this.selectedAddress ?? null;\n        break;\n\n      case 'eth_uninstallFilter':\n        this._rpcRequest(payload, NOOP);\n        result = true;\n        break;\n\n      case 'net_version':\n        result = this.networkVersion ?? null;\n        break;\n\n      default:\n        throw new Error(messages.errors.unsupportedSync(payload.method));\n    }\n\n    return {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      result,\n    };\n  }\n\n  /**\n   * Constructor helper.\n   *\n   * Gets the experimental _metamask API as Proxy, so that we can warn consumers\n   * about its experimental nature.\n   *\n   * @returns The experimental _metamask API.\n   */\n  protected _getExperimentalApi() {\n    return new Proxy(\n      {\n        /**\n         * Determines if MetaMask is unlocked by the user.\n         *\n         * @returns Promise resolving to true if MetaMask is currently unlocked.\n         */\n        isUnlocked: async () => {\n          if (!this._state.initialized) {\n            await new Promise<void>((resolve) => {\n              this.on('_initialized', () => resolve());\n            });\n          }\n          return this._state.isUnlocked;\n        },\n\n        /**\n         * Make a batch RPC request.\n         *\n         * @param requests - The RPC requests to make.\n         */\n        requestBatch: async (requests: UnvalidatedJsonRpcRequest[]) => {\n          if (!Array.isArray(requests)) {\n            throw ethErrors.rpc.invalidRequest({\n              message:\n                'Batch requests must be made with an array of request objects.',\n              data: requests,\n            });\n          }\n\n          return new Promise((resolve, reject) => {\n            this._rpcRequest(requests, getRpcPromiseCallback(resolve, reject));\n          });\n        },\n      },\n      {\n        get: (obj, prop, ...args) => {\n          if (!this._sentWarnings.experimentalMethods) {\n            this._log.warn(messages.warnings.experimentalMethods);\n            this._sentWarnings.experimentalMethods = true;\n          }\n          return Reflect.get(obj, prop, ...args);\n        },\n      },\n    );\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state. Does nothing if neither the chainId\n   * nor the networkVersion are different from existing values.\n   *\n   * @fires MetamaskInpageProvider#networkChanged\n   * @param networkInfo - An object with network info.\n   * @param networkInfo.chainId - The latest chain ID.\n   * @param networkInfo.networkVersion - The latest network ID.\n   */\n  protected _handleChainChanged({\n    chainId,\n    networkVersion,\n  }: { chainId?: string; networkVersion?: string } = {}) {\n    // This will validate the params and disconnect the provider if the\n    // networkVersion is 'loading'.\n    super._handleChainChanged({ chainId, networkVersion });\n\n    if (this._state.isConnected && networkVersion !== this.networkVersion) {\n      this.networkVersion = networkVersion as string;\n      if (this._state.initialized) {\n        this.emit('networkChanged', this.networkVersion);\n      }\n    }\n  }\n}\n"]}