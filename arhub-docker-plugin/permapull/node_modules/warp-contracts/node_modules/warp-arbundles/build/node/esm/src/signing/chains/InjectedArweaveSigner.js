import Arweave from 'arweave';
import base64url from 'base64url';
import { SignatureConfig, SIG_CONFIG } from '../../constants.js';
import { DataItem } from '../../DataItem.js';
export class InjectedArweaveSigner {
    signer;
    publicKey;
    ownerLength = SIG_CONFIG[SignatureConfig.ARWEAVE].pubLength;
    signatureLength = SIG_CONFIG[SignatureConfig.ARWEAVE].sigLength;
    signatureType = SignatureConfig.ARWEAVE;
    constructor(windowArweaveWallet) {
        this.signer = windowArweaveWallet;
    }
    async setPublicKey() {
        let arOwner;
        if (this.signer.getPublicKey) {
            arOwner = await this.signer.getPublicKey();
        }
        else {
            arOwner = await this.signer.getActivePublicKey();
        }
        this.publicKey = base64url.toBuffer(arOwner);
    }
    async sign(message) {
        if (!this.publicKey) {
            await this.setPublicKey();
        }
        const algorithm = {
            name: 'RSA-PSS',
            saltLength: 0,
        };
        const signature = await this.signer.signature(message, algorithm);
        const buf = new Uint8Array(Object.values(signature));
        return buf;
    }
    async signDataItem(data, tags) {
        if (!this.publicKey) {
            await this.setPublicKey();
        }
        return new DataItem(Buffer.from(await this.signer.signDataItem({
            data,
            tags,
        })));
    }
    static async verify(pk, message, signature) {
        return await Arweave.crypto.verify(pk, message, signature);
    }
}
//# sourceMappingURL=InjectedArweaveSigner.js.map