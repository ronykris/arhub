"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sign = exports.getSignatureAndId = void 0;
const ar_data_base_1 = require("./ar-data-base");
const utils_1 = require("./nodeUtils.js");
function getSignatureAndId(item, signer) {
    return __awaiter(this, void 0, void 0, function* () {
        const signatureData = yield (0, ar_data_base_1.getSignatureData)(item);
        const signatureBytes = yield signer.sign(signatureData);
        const idBytes = yield (0, utils_1.getCryptoDriver)().hash(signatureBytes);
        return { signature: Buffer.from(signatureBytes), id: Buffer.from(idBytes) };
    });
}
exports.getSignatureAndId = getSignatureAndId;
function sign(item, signer) {
    return __awaiter(this, void 0, void 0, function* () {
        const { signature, id } = yield getSignatureAndId(item, signer);
        item.getRaw().set(signature, 2);
        return id;
    });
}
exports.sign = sign;
//# sourceMappingURL=ar-data-bundle.js.map