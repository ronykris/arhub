"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const secp256k1_1 = __importDefault(require("../keys/secp256k1"));
const secp256k1_2 = __importDefault(require("secp256k1"));
const utils_1 = require("ethers/lib/utils");
const base64url_1 = __importDefault(require("base64url"));
const ethers_1 = require("ethers");
class EthereumSigner extends secp256k1_1.default {
    get publicKey() {
        return Buffer.from(this.pk, "hex");
    }
    constructor(key) {
        const b = Buffer.from(key, "hex");
        const pub = secp256k1_2.default.publicKeyCreate(b, false);
        super(key, Buffer.from(pub));
    }
    sign(message) {
        const wallet = new ethers_1.ethers.Wallet(this._key);
        return wallet
            .signMessage(message)
            .then((r) => Buffer.from(r.slice(2), "hex"));
        // below doesn't work due to lacking correct v derivation.
        //return Buffer.from(joinSignature(Buffer.from(secp256k1.ecdsaSign(arrayify(hashMessage(message)), this.key).signature)).slice(2), "hex");
    }
    static async verify(pk, message, signature) {
        // const address = ethers.utils.computeAddress(pk);
        // return ethers.utils.verifyMessage(message, signature) === address;
        return secp256k1_2.default.ecdsaVerify((signature.length === 65) ? signature.slice(0, -1) : signature, utils_1.arrayify(utils_1.hashMessage(message)), (typeof pk === "string") ? base64url_1.default.toBuffer(pk) : pk);
    }
}
exports.default = EthereumSigner;
//# sourceMappingURL=ethereumSigner.js.map