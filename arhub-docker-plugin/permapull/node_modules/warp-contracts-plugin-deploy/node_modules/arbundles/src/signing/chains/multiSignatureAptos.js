"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const aptos_1 = require("aptos");
const ed25519 = __importStar(require("@noble/ed25519"));
// import nacl from 'tweetnacl';
const constants_1 = require("../../constants");
class MultiSignatureAptosSigner {
    constructor(publicKey, collectSignatures) {
        this.ownerLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.MULTIAPTOS].pubLength;
        this.signatureLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.MULTIAPTOS].sigLength;
        this.signatureType = constants_1.SignatureConfig.MULTIAPTOS;
        this._publicKey = publicKey;
        this.collectSignatures = collectSignatures;
    }
    get publicKey() {
        return this._publicKey;
    }
    async sign(message) {
        const { signatures, bitmap } = await this.collectSignatures(message);
        const generatedBitmap = aptos_1.TxnBuilderTypes.MultiEd25519Signature.createBitmap(bitmap);
        const signature = Buffer.alloc(this.signatureLength);
        let sigPos = 0;
        for (let i = 0; i < 32; i++) {
            if (bitmap.includes(i)) {
                signature.set(signatures[sigPos++], i * 64);
            }
        }
        // signatures.forEach((s, i) => {
        //     signature.set(s, i * 64)
        // })
        signature.set(generatedBitmap, this.signatureLength - 4);
        return signature;
    }
    static async verify(pk, message, signature) {
        const signatureLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.MULTIAPTOS].sigLength;
        const bitmapPos = signatureLength - 4;
        const signatures = signature.slice(0, bitmapPos);
        const encodedBitmap = signature.slice(bitmapPos);
        let oneFalse = false;
        for (let i = 0; i < 32; i++) {
            // check bitmap
            let bucket = Math.floor(i / 8);
            let bucket_pos = i - bucket * 8;
            const sigIncluded = (encodedBitmap[bucket] & (128 >> bucket_pos)) != 0;
            if (sigIncluded) {
                const signature = signatures.slice(i * 64, (i + 1) * 64);
                const pubkey = pk.slice(i * 32, (i + 1) * 32);
                if (!(await ed25519.verify(Buffer.from(signature), Buffer.from(message), Buffer.from(pubkey))))
                    oneFalse = true;
            }
        }
        return !oneFalse;
    }
}
exports.default = MultiSignatureAptosSigner;
//# sourceMappingURL=multiSignatureAptos.js.map