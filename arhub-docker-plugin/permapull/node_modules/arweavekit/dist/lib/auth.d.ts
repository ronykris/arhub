import { ConnectProps, OthentInstanceConenctionProps, UserDetailsReturnProps } from '../types/auth';
/***
 * connect to arconnect wallet
 * @params ConnectProps
 */
export declare function connect(params: ConnectProps): Promise<void>;
/***
 * disconnect arconnect wallet
 */
export declare function disconnect(): Promise<void>;
/***
 * connect to arconnect wallet
 * @returns string
 */
export declare function getActiveAddress(): Promise<string>;
/***
 * get permissions current wallet
 */
export declare function getPermissions(): Promise<import("arconnect").PermissionType[]>;
/***
 * get wallet names
 */
export declare function getWalletNames(): Promise<{
    [addr: string]: string;
}>;
/***
 * get all wallet addresses
 * @returns string[]
 */
export declare function getAllAddresses(): Promise<string[]>;
/***
 * get active public key
 * @returns string
 */
export declare function getActivePublicKey(): Promise<string>;
/***
 * check if arconnect extenstion is installed
 * @returns boolean
 */
export declare function isInstalled(): Promise<boolean>;
/***
 * logIn using othent
 *
 */
export declare function logIn(params: OthentInstanceConenctionProps): Promise<import("othent").LogInReturnProps>;
/***
 * logOut using othent
 *
 */
export declare function logOut(params: OthentInstanceConenctionProps): Promise<void>;
/***
 * fetch userDetails using othent
 *
 */
export declare function userDetails(params: OthentInstanceConenctionProps): Promise<UserDetailsReturnProps>;
export declare const ArConnect: {
    connect: typeof connect;
    disconnect: typeof disconnect;
    getActiveAddress: typeof getActiveAddress;
    getPermissions: typeof getPermissions;
    getWalletNames: typeof getWalletNames;
    getAllAddresses: typeof getAllAddresses;
    getActivePublicKey: typeof getActivePublicKey;
    isInstalled: typeof isInstalled;
};
export declare const Othent: {
    logIn: typeof logIn;
    logOut: typeof logOut;
    userDetails: typeof userDetails;
};
