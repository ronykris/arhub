import * as Types from '../types/contract';
/***
 * create warp contract
 * @params CreateContractProps
 * @returns CreateContractReturnProps
 */
export declare function createContract(params: Types.CreateContractProps): Promise<Types.CreateContractReturnProps>;
/**
 * write to warp contract
 * @params WriteContractProps
 */
export declare function writeContract(params: Types.WriteContractProps): Promise<{
    writeContract: import("warp-contracts").WriteInteractionResponse | null;
    state: unknown;
    result: {
        status: number;
        statusText: string;
    };
}>;
/**
 * read state of warp contract
 * @params ReadContractProps
 */
export declare function readContractState(params: Types.ReadContractProps): Promise<{
    readContract: import("warp-contracts").SortKeyCacheResult<import("warp-contracts").EvalStateResult<unknown>>;
    result: {
        status: number;
        statusText: string;
    };
}>;
/**
 * get contract
 * @params contractTxId: string
 * @returns Contract
 */
export declare function getContract(contractTxId: string): Promise<{
    contract: any;
}>;
/**
 * writeContractWOthent
 * @params WriteContractWOthentProps
 * @returns WriteContractWOthentReturnProps
 */
export declare function writeContractWOthent(params: Types.WriteContractWOthentProps): Promise<Types.WriteContractWOthentReturnProps>;
/**
 * readContractWOthent
 * @params ReadContractWOthentProps
 * @returns ReadContractWOthentReturnProps
 */
export declare function readContractWOthent(params: Types.ReadContractWOthentProps): Promise<Types.ReadContractWOthentReturnProps>;
